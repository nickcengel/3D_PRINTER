#ifndef POWDER_PART_H
#define POWDER_PART_H

#include <QVector>
#include <QString>
#include <QSharedPointer>

#include "powder_block.h"
#include "powder_settings.h"

/*
 * The PowderPart class groups PowderBlocks to represent a G-Code part file.
 * Typical usage involves passing a filepath and configuration to the constructor.
 * This constructor than creates a vector of PowderBlocks from the file at the given path
 * using the specified PowderSettings.
 *
 * PowderPart therefore includes the G-Code parser used to translate the incomming files into
 * PowderBlocks.
 */

class PowderPart
{
public:
    explicit PowderPart();
    PowderPart(const QString &filePath,  QSharedPointer<PowderSettings> config);
    PowderPart(const PowderPart &otherPart);
    ~PowderPart();

    enum PartStatus : uint8_t
    {
        PART_IS_EMPTY,
        PART_IS_VALID,
        PART_IS_INVALID,
    };

    enum ParserStatus : uint8_t
    {
        PARSER_SUCCESS,
        PARSER_INIT,
        PARSER_READY,
        PARSER_FAILED_INVALID_CONFIGURATION,
        PARSER_FAILED_INVALID_PART,
    };

    // Number of blocks (or G-Code lines) in the part
    int blockCount() const;
    void setBlockCount(const int &blockCount);


    // PowderParts may, but need not be divided into layers
    // using the keyword "NEW_LAYER"
    int layerCount() const;
    void setLayerCount(const int &layerCount);

    // Parsed files that violate one or more configuration paramaters
    // are flagged as invalid and cannot be used to control the machine.
    PartStatus partStatus() const;
    void setPartStatus(const PartStatus &partStatus);

    // the location of the input file selected by the user
    QString partFilePath() const;
    void setPartFilePath(const QString &partFilePath);

    // layerFlags is a vector containing the index of the blocks
    // that were flagged as representing the start of a new layer
    QVector<int> layerFlags() const;
    void setLayerFlags(const QVector<int> &layerFlags);

    // append block to the local PowderBlock vector.
    void addBlock(const PowderBlock &block);

    // Indicates whether the file was succesfully parsed.
    ParserStatus parserStatus() const;
    void setParserStatus(const ParserStatus &parserStatus);

    // A \r delimitted string holding the error messages
    // generated by the parser
    QString errorStr() const;
    void setErrorStr(const QString &errorStr);

    // A list containing the original g-code line corresponding to each block
    QStringList gcode() const;
    void setGcode(const QStringList &gcode);

    // returns the PowderBlock at blockNum
    PowderBlock getBlock(const int blockNum) const;

    // resets all private variables
    void clearPart();

    // provides a pointer to a ordered collection of PowderBlocks
    QSharedPointer<QVector<PowderBlock> > getBlocks() const;
    void setBlocks(const QSharedPointer<QVector<PowderBlock> > &blocks);

private:
    QString m_partFilePath;
    QString m_errorStr;
    QStringList m_gcode;

    QSharedPointer<QVector<PowderBlock>> m_blocks;
    int m_blockCount;
    int m_layerCount;
    PartStatus m_partStatus;
    QVector<int> m_layerFlags;
    ParserStatus m_parserStatus;

};

Q_DECLARE_METATYPE(PowderPart);


#endif // POWDER_PART_H
